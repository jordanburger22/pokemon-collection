/* App.css - Basic Styling for Pokemon Collection Manager */
/*
=============================================================================
INSTRUCTOR NOTES - App.css
=============================================================================

This CSS file provides basic styling that students can understand and modify.
Keep it simple - no complex animations or advanced CSS features yet.

TEACHING POINTS:
- Show how className in JSX connects to CSS classes
- Demonstrate basic layout with flexbox and grid
- Keep colors and spacing consistent
- Use meaningful class names that match component structure
*/

/* RESET AND BASE STYLES */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
  color: #333;
}

/* MAIN APP CONTAINER */
.app {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

/* HEADER STYLES */
.app-header {
  text-align: center;
  margin-bottom: 30px;
  color: white;
}

.app-header h1 {
  font-size: 3rem;
  margin-bottom: 10px;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.app-header p {
  font-size: 1.2rem;
  opacity: 0.9;
}

/* POKEMON GRID LAYOUT */
.pokemon-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

/* NO POKEMON MESSAGE */
.no-pokemon {
  grid-column: 1 / -1; /* Span full width */
  text-align: center;
  font-size: 1.2rem;
  color: white;
  background: rgba(255, 255, 255, 0.1);
  padding: 40px;
  border-radius: 12px;
  border: 2px dashed rgba(255, 255, 255, 0.3);
}

/* POKEMON CARD STYLES */
.pokemon-card {
  background: white;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease;
}

.pokemon-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

/* CARD HEADER (name and delete button) */
.card-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 15px;
}

.pokemon-name {
  font-size: 1.5rem;
  color: #2d3748;
  margin: 0;
}

.delete-button {
  background: #fed7d7;
  color: #c53030;
  border: none;
  border-radius: 8px;
  padding: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.delete-button:hover {
  background: #feb2b2;
  transform: scale(1.1);
}

/* POKEMON INFO */
.pokemon-info {
  line-height: 1.6;
}

.pokemon-info p {
  margin-bottom: 8px;
  font-size: 0.95rem;
}

.pokemon-info strong {
  color: #4a5568;
  font-weight: 600;
}

/* FORM CONTAINER */
.add-pokemon-form {
  background: white;
  border-radius: 12px;
  padding: 25px;
  margin-bottom: 30px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* FORM TITLE */
.form-title {
  display: flex;
  align-items: center;
  gap: 10px;
  font-size: 1.5rem;
  color: #2d3748;
  margin-bottom: 20px;
}

/* FORM LAYOUT */
.pokemon-form {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  align-items: start;
}

/* FORM GROUPS */
.form-group {
  display: flex;
  flex-direction: column;
}

/* FORM LABELS */
.form-label {
  font-weight: 600;
  color: #4a5568;
  margin-bottom: 5px;
  font-size: 0.9rem;
}

/* TEXT AND NUMBER INPUTS */
.form-input {
  padding: 10px 12px;
  border: 2px solid #e2e8f0;
  border-radius: 6px;
  font-size: 1rem;
  transition: border-color 0.2s ease;
}

.form-input:focus {
  outline: none;
  border-color: #4299e1;
  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
}

/* SELECT DROPDOWN */
.form-select {
  padding: 10px 12px;
  border: 2px solid #e2e8f0;
  border-radius: 6px;
  font-size: 1rem;
  background: white;
  cursor: pointer;
}

.form-select:focus {
  outline: none;
  border-color: #4299e1;
}

/* CHECKBOX STYLING */
.checkbox-label {
  display: flex;
  align-items: center;
  gap: 8px;
  cursor: pointer;
  margin-top: 5px;
}

.form-checkbox {
  width: 18px;
  height: 18px;
  cursor: pointer;
}

.checkbox-text {
  font-size: 0.95rem;
  color: #4a5568;
}

/* SUBMIT BUTTON */
.submit-button {
  grid-column: 1 / -1; /* Span full width */
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  background: linear-gradient(135deg, #4299e1, #3182ce);
  color: white;
  border: none;
  border-radius: 8px;
  padding: 12px 24px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  margin-top: 10px;
}

.submit-button:hover {
  background: linear-gradient(135deg, #3182ce, #2b77cb);
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(66, 153, 225, 0.3);
}

/* DEBUG INFO (remove in production) */
.debug-info {
  margin-top: 20px;
  padding: 15px;
  background: #f7fafc;
  border-radius: 6px;
  border-left: 4px solid #4299e1;
}

.debug-info h4 {
  color: #2d3748;
  margin-bottom: 10px;
  font-size: 0.9rem;
}

.debug-info pre {
  font-family: 'Courier New', monospace;
  font-size: 0.8rem;
  color: #4a5568;
  white-space: pre-wrap;
  word-wrap: break-word;
}

/* FOOTER */
.app-footer {
  text-align: center;
  margin-top: 40px;
  color: white;
  opacity: 0.8;
  font-size: 0.9rem;
}

/* RESPONSIVE DESIGN */
@media (max-width: 768px) {
  .app {
    padding: 15px;
  }
  
  .app-header h1 {
    font-size: 2rem;
  }
  
  .pokemon-grid {
    grid-template-columns: 1fr;
    gap: 15px;
  }
  
  .pokemon-form {
    grid-template-columns: 1fr;
    gap: 15px;
  }
  
  .card-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }
}

/*
=============================================================================
TEACHING POINTS FOR CSS:
=============================================================================

1. CLASS NAMING:
   - Use descriptive names that match the component structure
   - kebab-case for CSS classes (pokemon-card, form-group)
   - BEM methodology could be introduced later

2. LAYOUT TECHNIQUES:
   - CSS Grid for the pokemon grid and form layout
   - Flexbox for smaller component layouts
   - Show how grid-template-columns creates responsive layouts

3. STYLING CONSISTENCY:
   - Consistent padding, margins, and border-radius values
   - Consistent color scheme throughout
   - Reusable spacing patterns

4. INTERACTIVE ELEMENTS:
   - :hover states for buttons and cards
   - :focus states for form inputs
   - Smooth transitions for better UX

5. RESPONSIVE DESIGN:
   - Media queries for mobile devices
   - Flexible grid layouts that adapt to screen size
   - Appropriate font sizing for different screens

COMMON CSS MISTAKES TO WATCH FOR:
- Forgetting to connect className in JSX to CSS class
- Inconsistent spacing and sizing
- Not including focus states for accessibility
- Overly complex selectors
- Missing responsive design considerations

EXTENSION IDEAS:
- Add CSS custom properties (CSS variables) for colors
- Introduce CSS modules for component-scoped styles
- Add simple animations and transitions
- Explore different layout techniques
=============================================================================
*/